{
  "name": "智能学习分析工作流",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/ai/learning-analytics",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "analytics-webhook",
      "name": "学习分析触发器",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [280, 300],
      "webhookId": "learning-analytics"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "user-id",
              "name": "userId",
              "value": "={{ $('学习分析触发器').item.json.body.userId }}",
              "type": "string"
            },
            {
              "id": "analysis-type",
              "name": "analysisType",
              "value": "={{ $('学习分析触发器').item.json.body.analysisType || 'comprehensive' }}",
              "type": "string"
            },
            {
              "id": "time-range",
              "name": "timeRange",
              "value": "={{ parseInt($('学习分析触发器').item.json.body.timeRange) || 7 }}",
              "type": "number"
            },
            {
              "id": "time-start",
              "name": "startDate",
              "value": "={{ new Date(Date.now() - (parseInt($('学习分析触发器').item.json.body.timeRange) || 7) * 24 * 60 * 60 * 1000).toISOString().slice(0,10) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "extract-analytics-params",
      "name": "提取分析参数",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [500, 300]
    },
    {
      "parameters": {
        "resource": "rows",
        "operation": "get",
        "tableId": "learning_stats",
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "user_id",
              "condition": "equals",
              "keyValue": "={{ $json.userId }}"
            },
            {
              "keyName": "date",
              "condition": "largerEqual",
              "keyValue": "={{ $json.startDate }}"
            }
          ]
        },
        "returnAll": true
      },
      "id": "get-learning-stats",
      "name": "获取学习统计",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [720, 300],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "supabase-credentials"
        }
      }
    },
    {
      "parameters": {
        "resource": "rows",
        "operation": "get",
        "tableId": "user_progress",
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "user_id",
              "condition": "equals",
              "keyValue": "={{ $('提取分析参数').item.json.userId }}"
            }
          ]
        },
        "returnAll": true
      },
      "id": "get-progress-data",
      "name": "获取进度数据",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [940, 300],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "supabase-credentials"
        }
      }
    },
    {
      "parameters": {
        "resource": "rows",
        "operation": "get",
        "tableId": "okrs",
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "user_id",
              "condition": "equals",
              "keyValue": "={{ $('提取分析参数').item.json.userId }}"
            },
            {
              "keyName": "status",
              "condition": "equals",
              "keyValue": "active"
            }
          ]
        },
        "returnAll": true
      },
      "id": "get-okr-data",
      "name": "获取OKR数据",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1160, 300],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "supabase-credentials"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const statsData = $('获取学习统计').first().json || [];\nconst progressData = $('获取进度数据').first().json || [];\nconst okrData = $('获取OKR数据').first().json || [];\nconst params = $('提取分析参数').first().json;\n\nconsole.log('分析数据汇总 - 统计:', statsData.length, '进度:', progressData.length, 'OKR:', okrData.length);\n\n// 计算学习统计\nlet totalTime = 0;\nlet totalLessons = 0;\nlet totalCourses = 0;\nlet dailyStats = [];\n\nstatsData.forEach(stat => {\n  totalTime += stat.total_time || 0;\n  totalLessons += stat.lessons_completed || 0;\n  totalCourses += stat.courses_completed || 0;\n  dailyStats.push({\n    date: stat.date,\n    time: stat.total_time || 0,\n    lessons: stat.lessons_completed || 0\n  });\n});\n\n// 计算课程进度分析\nlet courseAnalysis = {};\nlet completedCourses = 0;\nlet inProgressCourses = 0;\n\nprogressData.forEach(progress => {\n  const courseId = progress.course_id;\n  if (!courseAnalysis[courseId]) {\n    courseAnalysis[courseId] = {\n      courseId: courseId,\n      title: progress.course_title || 'Unknown Course',\n      category: progress.course_category || 'General',\n      difficulty: progress.course_difficulty || 'beginner',\n      totalProgress: 0,\n      lessonsCount: 0,\n      completedLessons: 0\n    };\n  }\n  \n  courseAnalysis[courseId].totalProgress += progress.progress || 0;\n  courseAnalysis[courseId].lessonsCount++;\n  if (progress.progress >= 100) {\n    courseAnalysis[courseId].completedLessons++;\n  }\n});\n\n// 计算每门课程的完成率\nObject.values(courseAnalysis).forEach(course => {\n  course.completionRate = course.lessonsCount > 0 ? \n    Math.round(course.totalProgress / course.lessonsCount) : 0;\n  \n  if (course.completionRate >= 100) {\n    completedCourses++;\n  } else if (course.completionRate > 0) {\n    inProgressCourses++;\n  }\n});\n\n// OKR分析\nlet okrAnalysis = okrData.map(okr => ({\n  id: okr.id,\n  title: okr.title,\n  objective: okr.objective,\n  progress: okr.progress || 0,\n  keyResults: okr.key_results || [],\n  targetDate: okr.target_date,\n  daysRemaining: okr.target_date ? \n    Math.ceil((new Date(okr.target_date) - new Date()) / (1000 * 60 * 60 * 24)) : null\n}));\n\n// 学习模式分析\nconst avgDailyTime = dailyStats.length > 0 ? totalTime / dailyStats.length : 0;\nconst avgDailyLessons = dailyStats.length > 0 ? totalLessons / dailyStats.length : 0;\n\n// 构建分析结果\nconst analysisResult = {\n  userId: params.userId,\n  analysisType: params.analysisType,\n  timeRange: params.timeRange,\n  summary: {\n    totalStudyTime: totalTime,\n    totalLessonsCompleted: totalLessons,\n    totalCoursesCompleted: totalCourses,\n    avgDailyStudyTime: Math.round(avgDailyTime),\n    avgDailyLessons: Math.round(avgDailyLessons * 10) / 10,\n    activeCourses: inProgressCourses,\n    completedCourses: completedCourses\n  },\n  courseProgress: Object.values(courseAnalysis),\n  okrProgress: okrAnalysis,\n  dailyStats: dailyStats,\n  timestamp: new Date().toISOString()\n};\n\nconsole.log('学习分析结果:', JSON.stringify(analysisResult, null, 2));\nreturn analysisResult;"
      },
      "id": "analyze-learning-data",
      "name": "分析学习数据",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1380, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.dify.ai/v1/chat-messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer app-4lsTc1J3JsbwoHXdAxGONNkH"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "user",
              "value": "={{ $json.userId }}"
            },
            {
              "name": "query",
              "value": "请基于以下学习数据为用户提供个性化的学习分析和建议：\\n\\n学习概况：\\n- 总学习时间：{{ $json.summary.totalStudyTime }}秒\\n- 完成课程数：{{ $json.summary.totalLessonsCompleted }}\\n- 日均学习时间：{{ $json.summary.avgDailyStudyTime }}秒\\n- 日均完成课程：{{ $json.summary.avgDailyLessons }}\\n\\n课程进度：{{ JSON.stringify($json.courseProgress) }}\\n\\nOKR目标：{{ JSON.stringify($json.okrProgress) }}\\n\\n请提供：1)学习效果评估 2)改进建议 3)下一步学习计划"
            },
            {
              "name": "inputs"
            }
          ]
        },
        "options": {}
      },
      "id": "generate-ai-insights",
      "name": "生成AI洞察",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1600, 300]
    },
    {
      "parameters": {
        "jsCode": "const analysisData = $('分析学习数据').first().json;\nconst aiResponse = $input.first().json;\n\nlet aiInsights = '';\nif (aiResponse && aiResponse.answer) {\n  aiInsights = aiResponse.answer;\n} else {\n  aiInsights = '暂时无法生成AI分析，请稍后再试。';\n}\n\n// 生成学习建议\nconst suggestions = [];\n\n// 基于学习时间的建议\nif (analysisData.summary.avgDailyStudyTime < 1800) { // 少于30分钟\n  suggestions.push({\n    type: 'time_management',\n    priority: 'high',\n    message: '建议增加每日学习时间，目标至少30分钟以提高学习效果'\n  });\n}\n\n// 基于课程进度的建议\nif (analysisData.summary.activeCourses > 3) {\n  suggestions.push({\n    type: 'focus',\n    priority: 'medium',\n    message: '当前同时学习的课程较多，建议专注于2-3门核心课程'\n  });\n}\n\n// 基于OKR的建议\nanalysisData.okrProgress.forEach(okr => {\n  if (okr.daysRemaining && okr.daysRemaining < 7 && okr.progress < 80) {\n    suggestions.push({\n      type: 'okr_urgent',\n      priority: 'high',\n      message: `OKR目标\"${okr.title}\"即将到期，当前进度${okr.progress}%，需要加快进度`\n    });\n  }\n});\n\nconst finalResult = {\n  ...analysisData,\n  aiInsights: aiInsights,\n  suggestions: suggestions,\n  analysisComplete: true\n};\n\nreturn finalResult;"
      },
      "id": "compile-final-analysis",
      "name": "编译最终分析",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1820, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "success": true,
          "message": "学习分析完成",
          "data": "={{ $json }}",
          "timestamp": "={{ $json.timestamp }}"
        },
        "options": {}
      },
      "id": "success-analytics-response",
      "name": "成功分析响应",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2040, 300]
    }
  ],
  "pinData": {},
  "connections": {
    "学习分析触发器": {
      "main": [
        [
          {
            "node": "提取分析参数",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "提取分析参数": {
      "main": [
        [
          {
            "node": "获取学习统计",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "获取学习统计": {
      "main": [
        [
          {
            "node": "获取进度数据",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "获取进度数据": {
      "main": [
        [
          {
            "node": "获取OKR数据",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "获取OKR数据": {
      "main": [
        [
          {
            "node": "分析学习数据",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "分析学习数据": {
      "main": [
        [
          {
            "node": "生成AI洞察",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "生成AI洞察": {
      "main": [
        [
          {
            "node": "编译最终分析",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "编译最终分析": {
      "main": [
        [
          {
            "node": "成功分析响应",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "smart-analytics-v1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "SmartLearningAnalytics",
  "tags": ["learning", "analytics", "ai", "insights"]
}
