{
  "name": "Course Recommendation API",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "api/courses/recommend",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-node",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "course-recommend-webhook"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": "public",
        "table": "courses",
        "limit": 10,
        "where": {
          "conditions": [
            {
              "leftValue": "status",
              "rightValue": "active"
            }
          ]
        },
        "sort": {
          "values": [
            {
              "field": "created_at",
              "direction": "DESC"
            }
          ]
        }
      },
      "id": "supabase-node",
      "name": "Supabase - Get Courses",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [460, 300],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 处理课程推荐逻辑\nconst requestData = $input.first().json.body || {};\nconst userId = requestData.userId;\nconst limit = requestData.limit || 5;\nconst preferences = requestData.preferences || {};\n\n// 获取课程数据\nconst courses = $input.last().json;\n\n// 简单的推荐算法（可以根据需要扩展）\nlet recommendedCourses = courses;\n\n// 如果有用户偏好，进行过滤\nif (preferences.category) {\n  recommendedCourses = recommendedCourses.filter(course => \n    course.category === preferences.category\n  );\n}\n\nif (preferences.difficulty) {\n  recommendedCourses = recommendedCourses.filter(course => \n    course.difficulty === preferences.difficulty\n  );\n}\n\n// 限制返回数量\nrecommendedCourses = recommendedCourses.slice(0, limit);\n\n// 返回推荐结果\nreturn {\n  success: true,\n  data: {\n    userId: userId,\n    recommendations: recommendedCourses,\n    total: recommendedCourses.length,\n    timestamp: new Date().toISOString()\n  },\n  message: `为用户 ${userId} 推荐了 ${recommendedCourses.length} 门课程`\n};"
      },
      "id": "code-node",
      "name": "Process Recommendations",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "response-node",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [900, 300]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Supabase - Get Courses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase - Get Courses": {
      "main": [
        [
          {
            "node": "Process Recommendations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Recommendations": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "course-recommendation-workflow",
  "tags": []
}